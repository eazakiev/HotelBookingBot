import datetime

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, Text
from aiogram.types import ReplyKeyboardRemove, CallbackQuery, Message

from tgbot.database.history import add_command_to_history, add_city_to_history
from tgbot.keyboards.inline import price_range_keyboard, distance_range_keyboard, create_calendar, CustomCalendar, \
    CUSTOM_STEPS, is_correct_markup
from tgbot.misc.dates import get_readable_date
from tgbot.misc.errors import is_message_error, finish_with_error, delete_errors_messages
from tgbot.misc.named_tuples import KM
from tgbot.misc.states import SelectCity, SelectDates, BestDeal, GetHotels
from tgbot.rapidapi.hotels_request import create_cities_message

time_offset = datetime.timezone(datetime.timedelta(hours=3))


async def define_commands(message: types.Message, state: FSMContext):
    """
    –£–ª–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –æ—Ç–µ–ª–µ–π —Å –Ω–∏–∑–∫–∏–º–∏ —Ü–µ–Ω–∞–º–∏, –≤—ã—Å–æ–∫–∏–º–∏ —Ü–µ–Ω–∞–º–∏ –∏ –æ—Ç–µ–ª–µ–π —Å –Ω–∞–∏–ª—É—á—à–∏–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏.
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    """
    command = message.text.lstrip('/')
    await message.answer("<b>‚ÜòÔ∏è –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ–∏—Å–∫ –æ—Ç–µ–ª–µ–π</b>",
                         reply_markup=ReplyKeyboardRemove())
    await SelectCity.wait_city_name.set()
    await register_command_in_db(command, message, state)


async def show_lowprice(message: types.Message, state: FSMContext):
    """ –õ–æ–≤–∏—Ç —Ç–µ–∫—Å—Ç –æ–± –æ—Ç–µ–ª—è—Ö —Å –Ω–∏–∑–∫–∏–º–∏ —Ü–µ–Ω–∞–º–∏. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ """
    command = 'lowprice'
    await message.answer("<b>‚ÜòÔ∏è –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ–∏—Å–∫ –æ—Ç–µ–ª–µ–π</b>",
                         reply_markup=ReplyKeyboardRemove())
    await SelectCity.wait_city_name.set()
    await register_command_in_db(command, message, state)


async def show_highprice(message: types.Message, state: FSMContext):
    """ –õ–æ–≤–∏—Ç —Ç–µ–∫—Å—Ç –æ –¥–æ—Ä–æ–≥–∏—Ö –æ—Ç–µ–ª—è—Ö. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ """
    command = 'highprice'
    await message.answer("<b>‚ÜòÔ∏è –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ–∏—Å–∫ –æ—Ç–µ–ª–µ–π</b>",
                         reply_markup=ReplyKeyboardRemove())
    await SelectCity.wait_city_name.set()
    await register_command_in_db(command, message, state)


async def show_bestdeal(message: types.Message, state: FSMContext):
    """ –õ–æ–≤–∏—Ç —Ç–µ–∫—Å—Ç –æ–± –æ—Ç–µ–ª—è—Ö —Å –ª—É—á—à–∏–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ """
    command = 'bestdeal'
    await message.answer("<b>‚ÜòÔ∏è –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ–∏—Å–∫ –æ—Ç–µ–ª–µ–π</b>",
                         reply_markup=ReplyKeyboardRemove())
    await SelectCity.wait_city_name.set()
    await register_command_in_db(command, message, state)


async def get_cities_by_name(message: types.Message, state: FSMContext):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏ –ø–æ–ª—É—á–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ rapidapi –ø–æ –∏–º–µ–Ω–∏. –ï—Å–ª–∏ –≥–æ—Ä–æ–¥–∞ –Ω–∞–π–¥–µ–Ω—ã,
    –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    """
    city = message.text
    await state.update_data(city_name=city)
    await add_city_name_to_db(city_name=city, state=state)
    search = await message.answer('<i>–í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫...</i>')
    cities_message = await create_cities_message(city)
    await message.chat.delete_message(search.message_id)
    if is_message_error(cities_message):
        await finish_with_error(message=message, error=cities_message.get('error'))
    else:
        text, buttons = cities_message
        await message.answer(text, reply_markup=buttons)

        await SelectCity.select_city.set()


async def set_city_id(call: CallbackQuery, state: FSMContext):
    """ –ü–æ–ª—É—á–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥–æ—Ä–æ–¥–∞ (destination id) –∏–∑ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞. –ù–∞—á–∏–Ω–∞–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å –¥–∞—Ç—ã """
    city_id = call.data.lstrip('search_in_city')
    await state.update_data(city_id=city_id)
    await call.answer('–ì–æ—Ä–æ–¥ –≤—ã–±—Ä–∞–Ω', show_alert=False)
    await call.message.edit_text('<b>üèô –ì–æ—Ä–æ–¥ –≤—ã–±—Ä–∞–Ω!</b>', reply_markup=None)
    state_data = await state.get_data()
    command = state_data.get('command_type')

    if command == 'bestdeal':
        await start_select_price_range(call, state=state)
        return
    await SelectDates.start_select_date_in.set()
    await start_select_date_in(call=call)


async def start_select_price_range(call: CallbackQuery, state: FSMContext):
    """ –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ —Ü–µ–Ω—ã """
    await state.update_data(min_price=None, max_price=None)
    await BestDeal.select_price_range.set()
    await call.message.answer('<b>–£–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã –∑–∞ –Ω–æ—á—å</b>', reply_markup=price_range_keyboard())


async def send_min_price_request(call: CallbackQuery, state: FSMContext):
    """ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ –Ω–æ—á—å """
    await call.message.edit_reply_markup(reply_markup=None)
    message = await call.message.answer('<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≤ $</b>\n'
                                        '–ü—Ä–∏–º–µ—Ä: <b>100</b> –∏–ª–∏ <b>50</b>')
    await state.update_data(message_to_delete=message)
    await state.update_data(errors_messages=[])
    await state.update_data(message_to_edit=call.message)

    await BestDeal.wait_min_price.set()


async def get_min_price(message: types.Message, state: FSMContext):
    """ –ü–æ–ª—É—á–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–µ """
    state_data = await state.get_data()
    errors: list[Message] = state_data.get('errors_messages')
    try:
        price = int(message.text)
    except ValueError:
        error_message = await message.answer('<b>‚ùóÔ∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —á–∏—Å–ª–æ!</b>')
        errors.extend([error_message, message])
        await state.update_data(errors_messages=errors)
        return
    max_price = state_data.get('max_price')
    if max_price is not None:
        if max_price < price:
            error_message = await message.answer('<b>‚ùóÔ∏è–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π!</b>')
            errors.extend([error_message, message])
            await state.update_data(errors_messages=errors)
            return
    message_from_bot: Message = state_data.get('message_to_delete')
    message_from_user: Message = message
    message_with_select_price: Message = state_data.get('message_to_edit')
    await message_from_bot.delete()
    await message_from_user.delete()

    await state.update_data(min_price=price)
    await delete_errors_messages(message_list=errors)
    await state.update_data(errors_messages=[])
    await edit_price_message(message_to_edit=message_with_select_price, state=state)
    await BestDeal.select_price_range.set()


async def send_max_price_request(call: CallbackQuery, state: FSMContext):
    """ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ –Ω–æ—á—å """
    await call.message.edit_reply_markup(reply_markup=None)
    message = await call.message.answer('<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≤ $</b>\n'
                                        '–ü—Ä–∏–º–µ—Ä: <b>100</b> –∏–ª–∏ <b>50</b>')
    await state.update_data(message_to_delete=message)
    await state.update_data(message_to_edit=call.message)
    await BestDeal.wait_max_price.set()


async def get_max_price(message: Message, state: FSMContext):
    """ –ü–æ–ª—É—á–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–µ """
    state_data = await state.get_data()
    errors: list[Message] = state_data.get('errors_messages')
    try:
        price = int(message.text)
    except ValueError:
        error_message = await message.answer('<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —á–∏—Å–ª–æ!</b>')
        errors.extend([error_message, message])
        await state.update_data(errors_messages=errors)
        return
    min_price = state_data.get('min_price')
    if min_price is not None:
        if min_price > price:
            error_message = await message.answer('<b>‚ùóÔ∏è–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π!</b>')
            errors.extend([error_message, message])
            await state.update_data(errors_messages=errors)
            return
    message_from_bot: Message = state_data.get('message_to_delete')
    message_from_user: Message = message
    message_with_select_price: Message = state_data.get('message_to_edit')
    await message_from_bot.delete()
    await message_from_user.delete()

    await state.update_data(max_price=price)
    await delete_errors_messages(message_list=errors)
    await state.update_data(errors_messages=[])
    await edit_price_message(message_to_edit=message_with_select_price, state=state)
    await BestDeal.select_price_range.set()


async def edit_price_message(message_to_edit: Message, state: FSMContext):
    """ –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ü–µ–Ω–æ–≤–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ """
    state_data = await state.get_data()
    min_price, max_price = state_data.get('min_price'), state_data.get('max_price')
    if max_price is None:
        text = f'<b>–£–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã –∑–∞ –Ω–æ—á—å</b>\n' \
               f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: <b>{min_price} $</b>'
    elif min_price is None:
        text = f'<b>–£–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã –∑–∞ –Ω–æ—á—å</b>\n' \
               f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: <b>{max_price} $</b>'
    else:
        text = f'<b>–£–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã –∑–∞ –Ω–æ—á—å</b>\n' \
               f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: <b>{min_price} $</b>\n' \
               f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: <b>{max_price} $</b>'

    await message_to_edit.edit_text(text=text, reply_markup=price_range_keyboard())


async def end_price_range_selecting(call: CallbackQuery, state: FSMContext):
    """ –ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ —Ü–µ–Ω—ã """
    state_data = await state.get_data()
    if state_data.get('min_price') is None and state_data.get('max_price') is None:
        await state.update_data(min_price=1, max_price=5000000)
    elif state_data.get('min_price') is None:
        await state.update_data(min_price=1)
    elif state_data.get('max_price') is None:
        await state.update_data(max_price=5000000)
    await call.message.edit_text('<b>üí≤ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –≤—ã–±—Ä–∞–Ω!</b>')
    await start_select_distance_range(call, state)


async def start_select_distance_range(call, state):
    """ –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è """
    await state.update_data(max_distance=None)
    await BestDeal.select_distance_range.set()
    await call.message.answer('<b>–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —É–¥–∞–ª–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç —Ü–µ–Ω—Ç—Ä–∞</b>',
                              reply_markup=distance_range_keyboard())


async def send_max_distance_request(call: CallbackQuery, state: FSMContext):
    """ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ """
    await call.message.edit_reply_markup(reply_markup=None)
    message = await call.message.answer('<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —É–¥–∞–ª–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –≤ –ö–º</b>\n'
                                        '–ü—Ä–∏–º–µ—Ä: <b>5</b> –∏–ª–∏ <b>10</b>')
    await state.update_data(message_to_delete=message)
    await state.update_data(errors_messages=[])
    await state.update_data(message_to_edit=call.message)
    await BestDeal.wait_max_distance.set()


async def get_max_distance(message: Message, state: FSMContext):
    """ –ü–æ–ª—É—á–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ """
    state_data = await state.get_data()
    errors: list[Message] = state_data.get('errors_messages')
    try:
        distance: KM = float(message.text)
    except ValueError:
        error_message = await message.answer('<b>‚ùóÔ∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —á–∏—Å–ª–æ!</b>')
        errors.extend([error_message, message])
        await state.update_data(errors_messages=errors)
        return
    message_from_bot: Message = state_data.get('message_to_delete')
    message_from_user: Message = message
    message_with_select_distance: Message = state_data.get('message_to_edit')
    await message_from_bot.delete()
    await message_from_user.delete()

    await state.update_data(max_distance=distance)
    await delete_errors_messages(message_list=errors)
    await state.update_data(errors_messages=[])
    await edit_distance_message(message_to_edit=message_with_select_distance, state=state)
    await BestDeal.select_distance_range.set()


async def edit_distance_message(message_to_edit: Message, state: FSMContext):
    """ –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ """
    state_data = await state.get_data()
    max_distance = state_data.get('max_distance')
    text = f'<b>–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —É–¥–∞–ª–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç —Ü–µ–Ω—Ç—Ä–∞</b>\n' \
           f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: <b>{max_distance} –ö–º</b>'
    await message_to_edit.edit_text(text=text, reply_markup=distance_range_keyboard())


async def end_distance_range_selecting(call: CallbackQuery, state: FSMContext):
    """ –ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è """
    state_data = await state.get_data()
    if state_data.get('max_distance') is None:
        await state.update_data(max_distance=1000)
    await call.message.edit_text('<b>üè† –î–∏–∞–ø–∞–∑–æ–Ω —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –≤—ã–±—Ä–∞–Ω!</b>')
    await SelectDates.start_select_date_in.set()
    await start_select_date_in(call=call)


async def start_select_date_in(call: CallbackQuery):
    """ –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞ """
    calendar_info = create_calendar()
    await call.message.answer(f'‚ÜòÔ∏è <b>–£–∫–∞–∂–∏—Ç–µ {calendar_info.date_type} –∑–∞–µ–∑–¥–∞</b>',
                              reply_markup=calendar_info.calendar)
    await SelectDates.select_date_in.set()


async def select_date_in(call: CallbackQuery, state: FSMContext):
    """ –ü—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞ """
    result, keyboard, step = CustomCalendar().process(call_data=call.data)
    if not result and keyboard:
        await call.message.edit_text(f'‚ÜòÔ∏è <b>–£–∫–∞–∂–∏—Ç–µ {CUSTOM_STEPS[step]} –∑–∞–µ–∑–¥–∞</b>',
                                     reply_markup=keyboard)
    elif result:
        await state.update_data(date_in=result)
        message = get_readable_date(str_date=str(result))
        await call.message.edit_text(f'üìÖ <b>–í—ã–±—Ä–∞–Ω–æ: {message}\n'
                                     f'–í—Å–µ –≤–µ—Ä–Ω–æ?</b>', reply_markup=is_correct_markup('date_in'))
        await SelectDates.is_date_correct.set()


async def start_select_date_out(call: CallbackQuery, date_in: datetime):
    """ –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –≤—ã–µ–∑–¥–∞ """
    calendar_info = create_calendar(minimal_date=date_in)
    await call.message.answer(f'‚ÜòÔ∏è <b>–£–∫–∞–∂–∏—Ç–µ {calendar_info.date_type} –≤—ã–µ–∑–¥–∞</b>',
                              reply_markup=calendar_info.calendar)
    await SelectDates.select_date_out.set()


async def select_date_out(call: CallbackQuery, state: FSMContext):
    """ –ü—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –≤—ã–µ–∑–¥–∞ """
    state_data = await state.get_data()
    date_in = state_data.get('date_in')
    result, keyboard, step = CustomCalendar(min_date=date_in).process(call_data=call.data)
    if not result and keyboard:
        await call.message.edit_text(f'‚ÜòÔ∏è <b>–£–∫–∞–∂–∏—Ç–µ {CUSTOM_STEPS[step]} –≤—ã–µ–∑–¥–∞</b>',
                                     reply_markup=keyboard)
    elif result:
        await state.update_data(date_out=result)
        message = get_readable_date(str_date=str(result))
        await call.message.edit_text(f'üìÖ <b>–í—ã–±—Ä–∞–Ω–æ: {message}\n'
                                     f'–í—Å–µ –≤–µ—Ä–Ω–æ?</b>', reply_markup=is_correct_markup('date_out'))
        await SelectDates.is_date_correct.set()


async def send_confirmation_date(call: CallbackQuery, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã.
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –≤—Å–µ–π –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    """
    state_data = await state.get_data()
    city = state_data.get('city_name')
    date_in = state_data.get('date_in')
    date_out = state_data.get('date_out')

    if call.data == 'date_in_incorrect':
        await call.answer('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', show_alert=True)
        await call.message.delete()
        await SelectDates.start_select_date_in.set()
        await start_select_date_in(call=call)

    if call.data == 'date_out_incorrect':
        await call.answer('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', show_alert=True)
        await call.message.delete()
        await SelectDates.start_select_date_out.set()
        await start_select_date_out(call=call, date_in=date_in)

    if call.data == 'date_in_correct':
        await call.answer('–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞', show_alert=False)
        await call.message.delete()
        await SelectDates.start_select_date_out.set()
        await start_select_date_out(call=call, date_in=date_in)

    if call.data == 'date_out_correct':
        await call.answer('–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ —É–∫–∞–∑–∞–Ω–∞', show_alert=False)
        await call.message.delete()
        await call.message.answer('üìÖ <b> –î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞!</b>')
        await call.message.answer(f'‚ùì <b>–ì–æ—Ä–æ–¥: </b>{city}\n'
                                  f'<b>–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞: </b>{get_readable_date(str(date_in))}\n'
                                  f'<b>–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞: </b>{get_readable_date(str(date_out))}\n'
                                  f'\n'
                                  f'<b>–í—Å–µ –≤–µ—Ä–Ω–æ?</b>', reply_markup=is_correct_markup('city_info'))
        await GetHotels.is_info_correct.set()


async def register_command_in_db(command: str, message: Message, state: FSMContext):
    """ –î–æ–±–∞–≤–ª—è–µ—Ç –≤—ã–∑—ã–≤–∞–µ–º—É—é –∫–æ–º–∞–Ω–¥—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö """
    call_time = datetime.datetime.now(time_offset)
    await add_command_to_history(command=command, call_time=call_time, message=message)
    await state.update_data(command_type=command, command_call_time=call_time)


async def add_city_name_to_db(city_name: str, state: FSMContext):
    """ –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö """
    state_data = await state.get_data()
    call_time = str(state_data.get('command_call_time'))
    await add_city_to_history(city=city_name, call_time=call_time, user_id=state.chat)


def register_hotels(dp: Dispatcher):
    dp.register_message_handler(define_commands, Command(['lowprice', 'highprice', 'bestdeal']), state='*')
    dp.register_message_handler(show_lowprice, Text('‚¨áÔ∏è –ù–µ–¥–æ—Ä–æ–≥–∏–µ –æ—Ç–µ–ª–∏'), state='*')
    dp.register_message_handler(show_highprice, Text('‚¨ÜÔ∏è –î–æ—Ä–æ–≥–∏–µ –æ—Ç–µ–ª–∏'), state='*')
    dp.register_message_handler(show_bestdeal, Text('üîç –ü–æ–∏—Å–∫ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏'), state='*')
    dp.register_message_handler(get_cities_by_name, state=SelectCity.wait_city_name)
    dp.register_callback_query_handler(set_city_id, Text(startswith='search_in_city'), state=SelectCity.select_city)
    dp.register_callback_query_handler(send_min_price_request, Text(startswith='select_min_price'),
                                       state=BestDeal.select_price_range)
    dp.register_message_handler(get_min_price, state=BestDeal.wait_min_price)
    dp.register_callback_query_handler(send_max_price_request, Text(startswith='select_max_price'),
                                       state=BestDeal.select_price_range)
    dp.register_message_handler(get_max_price, state=BestDeal.wait_max_price)
    dp.register_callback_query_handler(end_price_range_selecting, Text(startswith='end_price_range'),
                                       state=BestDeal.select_price_range)
    dp.register_callback_query_handler(send_max_distance_request, Text(startswith='select_max_distance'),
                                       state=BestDeal.select_distance_range)
    dp.register_message_handler(get_max_distance, state=BestDeal.wait_max_distance)
    dp.register_callback_query_handler(end_distance_range_selecting, Text(startswith='end_distance_range'),
                                       state=BestDeal.select_distance_range)
    dp.register_callback_query_handler(select_date_in, state=SelectDates.select_date_in)
    dp.register_callback_query_handler(select_date_out, state=SelectDates.select_date_out)
    dp.register_callback_query_handler(send_confirmation_date, state=SelectDates.is_date_correct)
