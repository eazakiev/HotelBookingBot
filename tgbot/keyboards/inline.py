from datetime import datetime
from typing import Optional

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from telegram_bot_calendar import DetailedTelegramCalendar
from telegram_bot_pagination import InlineKeyboardPaginator

from tgbot.database.client import get_history_collection
from tgbot.misc.named_tuples import HotelInfo, CalendarMarkupAndStep, Degrees


def create_cities_markup(cities_dict: dict) -> InlineKeyboardMarkup:
    """ –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥–æ—Ä–æ–¥–∞—Ö """
    cities_markup = InlineKeyboardMarkup()
    city_index = 1
    for city_name, city_id in cities_dict.items():
        city_button = InlineKeyboardButton(text=f'{city_index}. {city_name}', callback_data=f'search_in_city{city_id}')
        cities_markup.row(city_button)
        city_index += 1
    return cities_markup


def create_hotel_keyboard(info: HotelInfo) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–µ–ª—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ next:
    - –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è
    - –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∞—Ö
    - –ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    """
    keyboard = InlineKeyboardMarkup(row_width=1)
    hotel_id = info.hotel_id
    booking_button = InlineKeyboardButton('‚úÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å', url=f'hotels.com/ho{hotel_id}')
    latitude, longitude = info.coordinates
    maps_button = InlineKeyboardButton('üåç –ù–∞ –∫–∞—Ä—Ç–µ', callback_data=f'get_hotel_map{latitude}/{longitude}')
    photos_button = InlineKeyboardButton('üì∑ –§–æ—Ç–æ', callback_data=f'get_hotel_photos{hotel_id}')
    keyboard.add(booking_button, maps_button, photos_button)
    return keyboard


CUSTOM_STEPS = {'y': '–≥–æ–¥', 'm': '–º–µ—Å—è—Ü', 'd': '–¥–µ–Ω—å'}


class CustomCalendar(DetailedTelegramCalendar):
    """ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å —É–¥–æ–±–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º """
    next_button = '‚û°Ô∏è'
    prev_button = '‚¨ÖÔ∏è'

    def __init__(self, min_date=datetime.now().date()):
        super().__init__(locale='ru', min_date=min_date)


def create_calendar(minimal_date: Optional[datetime] = None) -> CalendarMarkupAndStep:
    """ –°–æ–∑–¥–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –ø–æ–ª—É—á–∞–µ—Ç —à–∞–≥ –≤–≤–æ–¥–∞ """
    if minimal_date is None:
        calendar, step = CustomCalendar().build()
    else:
        calendar, step = CustomCalendar(min_date=minimal_date).build()
    return CalendarMarkupAndStep(calendar=calendar, date_type=CUSTOM_STEPS[step])


def is_correct_markup(text_before_correct: str):
    """ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä. –° –æ—Ç–≤–µ—Ç–∞–º–∏ "–¥–∞"/"–Ω–µ—Ç """
    is_correct = InlineKeyboardMarkup()
    yes_button = InlineKeyboardButton('–î–∞', callback_data=f'{text_before_correct}_correct')
    no_button = InlineKeyboardButton('–ù–µ—Ç', callback_data=f'{text_before_correct}_incorrect')
    is_correct.row(yes_button, no_button)
    return is_correct


def price_range_keyboard():
    """ –°–æ–∑–¥–∞–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ """
    keyboard = InlineKeyboardMarkup(row_width=1)
    min_price_button = InlineKeyboardButton('‚ûñ –£–∫–∞–∑–∞—Ç—å –æ—Ç —Å–∫–æ–ª—å–∫–∏', callback_data='select_min_price')
    max_price_button = InlineKeyboardButton('‚ûï –£–∫–∞–∑–∞—Ç—å –¥–æ —Å–∫–æ–ª—å–∫–∏', callback_data='select_max_price')
    complete_button = InlineKeyboardButton('‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data='end_price_range')
    keyboard.add(min_price_button, max_price_button, complete_button)
    return keyboard


def distance_range_keyboard():
    """ –°–æ–∑–¥–∞–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è """
    keyboard = InlineKeyboardMarkup(row_width=1)
    max_distance_button = InlineKeyboardButton('‚ûï –£–∫–∞–∑–∞—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ', callback_data='select_max_distance')
    complete_button = InlineKeyboardButton('‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data='end_distance_range')
    keyboard.add(max_distance_button, complete_button)
    return keyboard


def inline_markup_from_dict() -> InlineKeyboardMarkup:  # dictionary: dict
    """ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–π dict –≤–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ä–∞–∑–º–µ—Ç–∫—É"""
    keyboard = InlineKeyboardMarkup()
    return keyboard


def create_map_keyboard(latitude: Degrees, longitude: Degrees) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞—Ä—Ç—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ next:
    - –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∞—Ö Google
    - –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –ö–∞—Ä—Ç–∞—Ö –Ø–Ω–¥–µ–∫—Å
    """
    keyboard = InlineKeyboardMarkup(row_width=1)
    gmaps_link = f'http://maps.google.com/maps?q={latitude},{longitude}'
    ymaps_link = f'http://maps.yandex.ru/?text={latitude},{longitude}'
    google_maps_button = InlineKeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—å –≤ Google Maps', url=gmaps_link)
    yandex_maps_button = InlineKeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∞—Ö', url=ymaps_link)
    close_message_button = InlineKeyboardButton(text='‚ûñ –ó–∞–∫—Ä—ã—Ç—å', callback_data='close_message')
    keyboard.add(google_maps_button, yandex_maps_button, close_message_button)
    return keyboard


def create_photos_keyboard(photos_amount: int, page: int = 1) -> InlineKeyboardMarkup:
    """ –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ç–æ—Ä–∞ –ø–æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ """
    paginator = InlineKeyboardPaginator(photos_amount, current_page=page, data_pattern='get_photo{page}')
    paginator.add_after(InlineKeyboardButton(text='‚ûñ –ó–∞–∫—Ä—ã—Ç—å', callback_data='close_message'))
    return paginator.markup


async def generate_history_page_keyboard(user_id: int, command_call_time: str) -> Optional[InlineKeyboardMarkup]:
    """ –°–æ–∑–¥–∞–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ—Ç–µ–ª–∏ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –≤—ã–∑–≤–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π """
    is_hotels = await is_hotels_were_found(user_id, command_call_time)
    if not is_hotels:
        return None
    keyboard = InlineKeyboardMarkup()
    show_hotels_button = InlineKeyboardButton('‚¨áÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—Ç–µ–ª–∏',
                                              callback_data=f'show_history_page{command_call_time}')
    keyboard.row(show_hotels_button)
    return keyboard


async def is_hotels_were_found(user_id, call_time: str) -> bool:
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–∏ –ª–∏ –Ω–∞–π–¥–µ–Ω—ã –æ—Ç–µ–ª–∏ –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥—ã """
    collection = get_history_collection()
    user: dict = await collection.find_one({'_id': user_id})
    history = user['history']
    found_hotels = history[call_time]['found_hotels']
    return True if found_hotels else False


def create_history_page_close_keyboard(command_call_time: str) -> InlineKeyboardMarkup:
    """ –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–∫—Ä—ã—Ç–∏—è –∏—Å—Ç–æ—Ä–∏–∏ """
    keyboard = InlineKeyboardMarkup()
    close_hotels_button = InlineKeyboardButton('‚ûñ –°–∫—Ä—ã—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—Ç–µ–ª–∏',
                                               callback_data=f'close_history_page{command_call_time}')
    keyboard.row(close_hotels_button)
    return keyboard


def create_history_page_show_keyboard(command_call_time: str) -> InlineKeyboardMarkup:
    """ –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ """
    keyboard = InlineKeyboardMarkup()
    show_hotels_button = InlineKeyboardButton('‚¨áÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—Ç–µ–ª–∏',
                                              callback_data=f'show_history_page{command_call_time}')
    keyboard.row(show_hotels_button)
    return keyboard
